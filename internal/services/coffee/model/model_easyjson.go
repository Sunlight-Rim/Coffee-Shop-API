// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package model

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel(in *jlexer.Lexer, out *ListToppingsResDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "toppings_list":
			if in.IsNull() {
				in.Skip()
				out.ToppingsList = nil
			} else {
				in.Delim('[')
				if out.ToppingsList == nil {
					if !in.IsDelim(']') {
						out.ToppingsList = make([]string, 0, 4)
					} else {
						out.ToppingsList = []string{}
					}
				} else {
					out.ToppingsList = (out.ToppingsList)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.ToppingsList = append(out.ToppingsList, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel(out *jwriter.Writer, in ListToppingsResDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"toppings_list\":"
		out.RawString(prefix[1:])
		if in.ToppingsList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.ToppingsList {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListToppingsResDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListToppingsResDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListToppingsResDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListToppingsResDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel1(in *jlexer.Lexer, out *ListToppingsReqDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel1(out *jwriter.Writer, in ListToppingsReqDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListToppingsReqDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListToppingsReqDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListToppingsReqDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListToppingsReqDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel1(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel2(in *jlexer.Lexer, out *ListCoffeesResDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coffee_list":
			if in.IsNull() {
				in.Skip()
				out.CoffeeList = nil
			} else {
				in.Delim('[')
				if out.CoffeeList == nil {
					if !in.IsDelim(']') {
						out.CoffeeList = make([]Coffee, 0, 0)
					} else {
						out.CoffeeList = []Coffee{}
					}
				} else {
					out.CoffeeList = (out.CoffeeList)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Coffee
					(v4).UnmarshalEasyJSON(in)
					out.CoffeeList = append(out.CoffeeList, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel2(out *jwriter.Writer, in ListCoffeesResDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coffee_list\":"
		out.RawString(prefix[1:])
		if in.CoffeeList == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.CoffeeList {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListCoffeesResDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListCoffeesResDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListCoffeesResDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListCoffeesResDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel2(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel3(in *jlexer.Lexer, out *ListCoffeesReqDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "offset":
			out.Offset = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel3(out *jwriter.Writer, in ListCoffeesReqDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"offset\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.Offset))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ListCoffeesReqDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ListCoffeesReqDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ListCoffeesReqDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ListCoffeesReqDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel3(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel4(in *jlexer.Lexer, out *GetCoffeeInfoResDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coffee":
			if in.IsNull() {
				in.Skip()
				out.Coffee = nil
			} else {
				if out.Coffee == nil {
					out.Coffee = new(Coffee)
				}
				(*out.Coffee).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel4(out *jwriter.Writer, in GetCoffeeInfoResDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coffee\":"
		out.RawString(prefix[1:])
		if in.Coffee == nil {
			out.RawString("null")
		} else {
			(*in.Coffee).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCoffeeInfoResDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCoffeeInfoResDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCoffeeInfoResDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCoffeeInfoResDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel4(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel5(in *jlexer.Lexer, out *GetCoffeeInfoReqDelivery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.CoffeeID = uint64(in.Uint64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel5(out *jwriter.Writer, in GetCoffeeInfoReqDelivery) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.CoffeeID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetCoffeeInfoReqDelivery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetCoffeeInfoReqDelivery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetCoffeeInfoReqDelivery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetCoffeeInfoReqDelivery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel5(l, v)
}
func easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel6(in *jlexer.Lexer, out *Coffee) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "title":
			out.Title = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "image":
			out.Image = string(in.String())
		case "weight":
			out.Weight = uint64(in.Uint64())
		case "price":
			out.Price = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel6(out *jwriter.Writer, in Coffee) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix)
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"weight\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Weight))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.Float64(float64(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Coffee) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Coffee) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC80ae7adEncodeCoffeeshopApiInternalServicesCoffeeModel6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Coffee) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Coffee) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC80ae7adDecodeCoffeeshopApiInternalServicesCoffeeModel6(l, v)
}
